import React, { useContext, useState, useEffect } from 'react'

import { AuthContextType } from '../@types/auth'
import { MessengerContextType } from '../@types/messenger'

import { AuthContext } from '../context/AuthProvider'
import { MessengerContext } from '../context/MessengerProvider'

import AddChatContainer from './AddChatContainer'
import ChatListContainer from './ChatListContainer'
import SendContainer from './SendContainer'
import { NotificationContext } from '../context/NotificationProvider'
import { NotificationContextType } from '../@types/notification'
import ChatContainer from './ChatContainer'
import { deleteNotification, receiveNotification } from '../api/api'

const MessengerContainer: React.FC = () => {
  // –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { instance, setInstance } = useContext(AuthContext) as AuthContextType
  // –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
  const { chatList, currentChat, setCurrentChat } = useContext(MessengerContext) as MessengerContextType
  // –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const { notifications, addNotification, setNotificationsIsLoaded } = useContext(
    NotificationContext
  ) as NotificationContextType

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ api –≤ useEffect
  const [clickedButton, setClickedButton] = useState<boolean>(false)
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const [error, setError] = useState<boolean>(false)
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const [isLoading, setIsLoading] = useState<boolean>(false)
  // Id –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const [idMessage, setIdMessage] = useState<string>('')

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault()
    setClickedButton(true)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ api –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Whatsapp –ø–æ –Ω–æ–º–µ—Ä—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  useEffect(() => {
    if (!clickedButton) return

    const handleNotification = async () => {
      setIsLoading(true)

      let responseReceive

      while (responseReceive !== null) {
        try {
          responseReceive = await receiveNotification(instance)

          if (!responseReceive) break

          addNotification(responseReceive)

          await deleteNotification(instance, responseReceive.receiptId)
        } catch {
          setError(true)
          break
        }
      }

      setNotificationsIsLoaded(true)
      setIsLoading(false)
    }

    handleNotification()

    setClickedButton(false)

    // const intervalId = setInterval(handleNotification, 5000);
    // return () => clearInterval(intervalId);
  }, [clickedButton])

  return (
    <div>
      <h2>üçé Auth context data</h2>
      <p>ID: {instance.idInstance}</p>
      <p>Token: {instance.token}</p>
      <p>IsAuth: {instance.isAuth ? 'true' : 'false'}</p>

      <h2>ü•≠ Messenger context data</h2>
      <p>ChatList: {JSON.stringify(chatList)}</p>
      <p>CurrentChat: {JSON.stringify(currentChat)}</p>

      <h2>üçÜ NOTIFICATIONS:</h2>
      {notifications.map((notification, index) => (
        <p key={index}>
          <small>{JSON.stringify(notification)}</small>
        </p>
      ))}
      <button onClick={handleClick}>{isLoading ? 'Lodading...' : 'load new messages'}</button>

      <AddChatContainer />
      <ChatListContainer />
      <ChatContainer />
      <SendContainer />
    </div>
  )
}

export default MessengerContainer
